import tkinter as tk
from tkinter import messagebox
import pandas as pd
import numpy as np

class InventoryManagement:
    def __init__(self):
        self.products = []
        self.alerts = []

    def add_product(self, product_id, product_name, initial_stock, reorder_point, lead_time, historical_sales):
        new_product = {
            'product_id': product_id,
            'product_name': product_name,
            'current_stock': initial_stock,
            'reorder_point': reorder_point,
            'lead_time': lead_time,
            'historical_sales': historical_sales
        }
        self.products.append(new_product)

    def track_inventory(self, product_id):
        for product in self.products:
            if product['product_id'] == product_id:
                return product['current_stock']
        return None

    def reorder_alerts(self):
        self.alerts.clear()
        for product in self.products:
            if product['current_stock'] < product['reorder_point']:
                self.alerts.append(f"Reorder needed for {product['product_name']} (ID: {product['product_id']})")
        return self.alerts

    def calculate_reorder_points(self):
        for product in self.products:
            avg_daily_sales = np.mean(product['historical_sales'])
            reorder_point = avg_daily_sales * product['lead_time']
            reorder_quantity = avg_daily_sales * (product['lead_time'] + 7)  # Adding buffer stock for a week
            product['reorder_point'] = reorder_point
            product['reorder_quantity'] = reorder_quantity

    def generate_reports(self):
        turnover_rate = {}
        stockout_occurrences = 0
        overstock_costs = 0

        for product in self.products:
            turnover_rate[product['product_name']] = np.sum(product['historical_sales']) / product['current_stock']
            if product['current_stock'] < product['reorder_point']:
                stockout_occurrences += 1
            if product['current_stock'] > 1.5 * product['reorder_point']:
                overstock_costs += product['current_stock'] - product['reorder_point']

        return turnover_rate, stockout_occurrences, overstock_costs

class InventoryManagementUI:
    _instance = None

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self, root):
        if hasattr(self, 'root'):
            return
        self.root = root
        self.root.title("Inventory Management System")

        # Calculate screen width and height
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()

        # Calculate window width and height
        window_width = 600
        window_height = 400

        # Calculate position coordinates for centering the window
        x_position = (screen_width // 2) - (window_width // 2)
        y_position = (screen_height // 2) - (window_height // 2)

        # Set window size and position
        self.root.geometry(f"{window_width}x{window_height}+{x_position}+{y_position}")

        self.inventory_system = InventoryManagement()

        self.create_widgets()

    def create_widgets(self):
        # Labels and Entry fields
        label_width = 15
        entry_width = 35  # Increased width for Entry widgets

        tk.Label(self.root, text="Product ID:", width=label_width).grid(row=0, column=0)
        self.product_id_entry = tk.Entry(self.root, width=entry_width)
        self.product_id_entry.grid(row=0, column=1)

        tk.Label(self.root, text="Product Name:", width=label_width).grid(row=1, column=0)
        self.product_name_entry = tk.Entry(self.root, width=entry_width)
        self.product_name_entry.grid(row=1, column=1)

        tk.Label(self.root, text="Initial Stock:", width=label_width).grid(row=2, column=0)
        self.initial_stock_entry = tk.Entry(self.root, width=entry_width)
        self.initial_stock_entry.grid(row=2, column=1)

        tk.Label(self.root, text="Reorder Point:", width=label_width).grid(row=3, column=0)
        self.reorder_point_entry = tk.Entry(self.root, width=entry_width)
        self.reorder_point_entry.grid(row=3, column=1)

        tk.Label(self.root, text="Lead Time (days):", width=label_width).grid(row=4, column=0)
        self.lead_time_entry = tk.Entry(self.root, width=entry_width)
        self.lead_time_entry.grid(row=4, column=1)

        tk.Label(self.root, text="Historical Sales (comma-separated):", width=label_width).grid(row=5, column=0)
        self.historical_sales_entry = tk.Entry(self.root, width=entry_width)
        self.historical_sales_entry.grid(row=5, column=1)

        # Buttons with adjusted size and centered position
        button_width = 15  # Smaller width for buttons
        button_height = 2

        tk.Button(self.root, text="Add Product", command=self.add_product, width=button_width, height=button_height).grid(row=6, column=0, columnspan=2, pady=10)

        tk.Button(self.root, text="View Stock Levels", command=self.view_stock_levels, width=button_width, height=button_height).grid(row=7, column=0, columnspan=2, pady=10)

        tk.Button(self.root, text="View Reorder Alerts", command=self.view_reorder_alerts, width=button_width, height=button_height).grid(row=8, column=0, columnspan=2, pady=10)

        tk.Button(self.root, text="Generate Reports", command=self.generate_reports, width=button_width, height=button_height).grid(row=9, column=0, columnspan=2, pady=10)

        tk.Button(self.root, text="Exit", command=self.close_app, width=button_width, height=button_height).grid(row=10, column=0, columnspan=2, pady=10)

    def close_app(self):
        if messagebox.askokcancel("Exit", "Do you want to exit the application?"):
            self.root.destroy()
            InventoryManagementUI._instance = None

    def add_product(self):
        try:
            product_id = self.product_id_entry.get()
            product_name = self.product_name_entry.get()
            initial_stock = int(self.initial_stock_entry.get())
            reorder_point = int(self.reorder_point_entry.get())
            lead_time = int(self.lead_time_entry.get())
            historical_sales = list(map(int, self.historical_sales_entry.get().split(',')))

            self.inventory_system.add_product(product_id, product_name, initial_stock, reorder_point, lead_time, historical_sales)
            messagebox.showinfo("Success", "Product added successfully.")

        except ValueError:
            messagebox.showerror("Error", "Invalid input. Please enter valid numbers for Initial Stock, Reorder Point, Lead Time.")

    def view_stock_levels(self):
        product_id = self.product_id_entry.get()
        stock_level = self.inventory_system.track_inventory(product_id)
        if stock_level is not None:
            messagebox.showinfo("Stock Level", f"Current stock level for product {product_id}: {stock_level}", width=400)
        else:
            messagebox.showerror("Error", "Product not found.")

    def view_reorder_alerts(self):
        alerts = self.inventory_system.reorder_alerts()
        if alerts:
            alert_message = "\n".join(alerts)
            messagebox.showinfo("Reorder Alerts", alert_message, width=400)
        else:
            messagebox.showinfo("Reorder Alerts", "No reorder alerts.", width=400)

    def generate_reports(self):
        turnover_rate, stockout_occurrences, overstock_costs = self.inventory_system.generate_reports()
        report_message = "Inventory Turnover Rates:\n"
        for product, rate in turnover_rate.items():
            report_message += f"{product}: {rate:.2f}\n"
        report_message += f"\nStockout Occurrences: {stockout_occurrences}\n"
        report_message += f"Overstock Costs: {overstock_costs}\n"

        messagebox.showinfo("Reports", report_message, width=400)


def main():
    if not InventoryManagementUI._instance:
        root = tk.Tk()
        app = InventoryManagementUI(root)
        root.mainloop()

if __name__ == "__main__":
    main()
